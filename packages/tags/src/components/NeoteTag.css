neote-tag {
  font-family: system-ui, sans-serif;
  font-size: 0.875rem;
  line-height: 1.25rem;
  display: inline-flex;
  align-items: baseline;
  position: relative;

  &::before {
    content: "";
    display: inline-block;
    -webkit-mask-image: var(--icon);
    mask-image: var(--icon);
    background: currentColor;
    width: 16px;
    height: 16px;
    margin-inline-end: 0px;
    align-self: center;
    margin-inline-end: 4px;
  }

  .chip-light & {
    padding-inline: 6px;
    border-radius: 15px;
    background: hsl(var(--hue-color) 50% 90% / 100%);
    color: hsl(var(--hue-color) 100% 20% / 100%);
    font-weight: 700;
  }

  .chip-dark & {
    padding-inline: 6px;
    border-radius: 15px;
    color: hsl(var(--hue-color) 50% 97% / 100%);
    background-color: hsl(var(--hue-color) 100% 32% / 100%);
    font-weight: 700;
  }

  .chip-border & {
    padding-inline: 6px;
    border-radius: 15px;
    border-width: 1px;
    border-style: solid;
    border-color: hsl(var(--hue-color) 50% 80% / 100%);
    color: hsl(var(--hue-color) 100% 20% / 100%);
    font-weight: 700;
  }

  .chip-icon-light & {
    padding-inline: 4px;

    &::before {
      background: hsl(var(--hue-color) 100% 20% / 100%);
      z-index: 1;
    }

    &::after {
      align-self: center;
      content: "";
      width: 20px;
      height: 20px;
      border-radius: 99px;
      background: hsl(var(--hue-color) 50% 90% / 100%);
      position: absolute;
      inset-inline-start: 2px;
    }
  }

  .chip-icon-dark & {
    padding-inline: 4px;

    &::before {
      background: hsl(var(--hue-color) 50% 97% / 100%);
      z-index: 1;
    }

    &::after {
      align-self: center;
      content: "";
      width: 20px;
      height: 20px;
      border-radius: 99px;
      background: hsl(var(--hue-color) 100% 32% / 100%);
      position: absolute;
      inset-inline-start: 2px;
    }
  }

  .neon & {
    padding-inline: 6px;

    &::after {
      /*
        We use hsl to generate the base color because the hue in hsl has a wider color range than oklch.
        See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklch
        But oklch allows for a consistent lightness perceived by humans.
        See https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl
        That's why wrap the hsl value in oklch, creating a relative value with constant
        lightness, chroma and alpha but keep the hue
      */
      background: hsl(var(--hue-color) 100% 50% / 100%);
      /* background: oklch(from hsl(var(--hue-color) 100% 50%) 0.5 0.5 h / 0.9); */
      /* background: linear-gradient(0deg, rgba(255,255,255,0) 0%, oklch(from hsl(var(--hue-color) 100% 50%) 0.5 0.5 h) 80%, rgba(255,255,255,0) 100%); */
      width: 100%;
      height: 1px;
      filter: blur(2px);
      display: block;
      content: "";
      position: absolute;
      bottom: 3px;
      inset-inline-start: 0px;
    }
  }
}
